package util;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;


public class WordDriver {

	public static void main(String[] args) throws Exception {
		
		
		Configuration conf = new Configuration();   //interface between client F.S. and virtual F.S.

		FileSystem hdfs = FileSystem.get(conf);   
		
		Path hdfsPath = hdfs.getWorkingDirectory();
		//Path rootPath = new Path("/");
		
		
		hdfs.mkdirs(new Path ("/bapu"));  //Create Folder in HDFS
		
		hdfs.mkdirs(new Path ("/InputFolder")); 
		
		
		//hdfs.mkdirs(new Path ("/bapu"));  //Create Folder in HDFS

		//hdfs.delete(new Path(hdfsPath, new Path("/bapu")), true);  //delete that folder


		
		//System.out.println(conf);
 
		
		//System.out.println(hdfs);

		System.out.println(hdfsPath);
		Job job=Job.getInstance(conf, "Count Words");
		job.setJarByClass(WordDriver.class);
		job.setMapperClass(WordMapper.class);
		job.setReducerClass(WordReducer.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		Path workDirectory=hdfs.getWorkingDirectory();
		Path working=new Path(workDirectory, "/InputFolder/loaddata1");   //path of input data
		Path OutputDir = new Path(workDirectory,"/OutputFolder");  //path where result should be stored
		job.setInputFormatClass(KeyValueTextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		FileInputFormat.addInputPath(job, working);
		FileOutputFormat.setOutputPath(job, OutputDir);
		System.exit(job.waitForCompletion(true)?0:1);
		
	}

}